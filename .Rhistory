NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A")) #matrix creation (2:4)
NG #see NG
G2 <- graph_from_edgelist(NG)
plot(G2)
G3 <- graph_from_literal(A--B, B-+C), C-+A)
G3 <- graph_from_literal(A--B, B-+C, C-+A)
G3 <- graph_from_literal(A--B, B-+C, C-+A)
plot(G3)
G3 <- graph_from_literal(A+-B, B-+C, C-+A)
plot(G3)
G3 <- graph_from_literal(A+-B, B-+C, A-+C)
plot(G3)
df <- as.data.frame(NG)
G4 <- graph_from_data_frame(df)
plot(G4)
siteedges <- read.csv("sitelist.csv")
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
sites <- graph_from_data_frame(siteedges, directed = TRUE)
plot(sites)
sitevertices <- read.csv("sitevertices.csv")
sites <- graph_from_dataframe)sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_dataframe(sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
sites <- graph_from_data_frame(siteedges, directed = TRUE)
plot(sites)
sitevertices <- read.csv("sitevertices.csv")
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
plot(sites)
sites
plot(sites)
siteDFs <- as_data_frame(sites, what = "both")
str(siteDFs)
write_graph(sites, "sites.graphml", format = "graphml")
ggraph(sites) + geom_node_point() + geom_edge_link()
library("ggraph", lib.loc="~/R/win-library/3.4")
ggraph(sites) + geom_node_point() + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "dendrogram") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed()
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed()
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link(aes(colour = Period))
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link(aes(colour = period))
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period, size = 2)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period, cex = 2)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 2) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 20) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_minimal() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_minimal() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_bw() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link(aes(colour = "gray")) #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link() #colour and size
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed() #circular dendrogram (if there were enough points)
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link() #or with shapes
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() #or with colour(preset)
knitr::opts_chunk$set(echo = TRUE)
hairball
ggraph$hairball
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() #or with colour(preset)
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() #or with colour(preset)
if(!require("ggthemes")) install.packages('ggraph', repos='http://cran.us.r-project.org') #additional cosmetics
if(!require("ggthemes")) install.packages('ggthemes', repos='http://cran.us.r-project.org') #additional cosmetics
library('ggthemes')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + theme_solid #or with colour(preset)
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual('#44444', '#22222') #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#44444', '#22222')) #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc(alpha=..index..) + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + theme_graph() #or with colour(manual)
plot(sites, layout = layout.circle)
rglplot(sites, layout=1)
tkplot(sites, layout=layout.kamada.kawai)
tkplot(sites, layout=layout.kamada.kawai)
l <- layout=layout.kamda.kawai(sites)
l <- layout=layout.kamada.kawai(sites)
tkplot(sites, layout=layout.kamada.kawai)
l <- layout=layout.kamada.kawai(sites)
tkplot(sites, layout=layout.kamada.kawai)
install.packages("cchunts")
2 + 2
Christian <- 2
Christian
Christian + 2
require('igraph')
rm(Christian)
knitr::opts_chunk$set(echo = TRUE)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0)) #matrix creation (4:4)
A
G <- graph_from_adjacency_matrix(A) #function to make a graph from the matrix
plot(G) #plot the matrix i.e. 'G'
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A")) #matrix creation (2:4)
NG #see NG
G2 <- graph_from_edgelist(NG) #function to make a graph from the edge list
plot(G2) #plot the matrix i.e. 'G2'
plot(G3) #plot the new graph
G3 <- graph_from_literal(A+-B, B-+C, A-+C) #textual description
plot(G3) #plot the new graph
df <- as.data.frame(NG) #creation of NG as a data frame
plot(G4) #plot the new graph
G4 <- graph_from_data_frame(df) #graph from data frame
plot(G4) #plot the new graph
siteedges <- read.csv("sitelist.csv", Header = TRUE) #read the .csv file of links ("from x to y")
siteedges <- read.csv("sitelist.csv") #read the .csv file of links ("from x to y")
head(siteedges, n = 15) #check the first fifteen entries
head(siteedges, n = 15) #check the first fifteen entries
sites <- graph_from_data_frame(siteedges, directed = TRUE) #graph from data frame
plot(sites) #plot graph
plot(sites) #plot graph
plot(sites) #plot graph
#Tree analysis
# Relocate to specific folder
outtree <- read.tree(file = "outtree")
install.packages("C:/Users/cshog/Downloads/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
install.packages("Morpho",dependencies = TRUE)
library(GUImorph)
install.packages("tcltk2",dependencies = TRUE)
library(GUImorph)
GUImorph()
gm.results$coords
gm.results$Csize
gm.results$consensus
library('Binford')
library('binford')
Bethan <- LRB
head(Bethan)
View(Bethan)
Test <- LRBkey
View(Test)
install.packages("markdown")
install.packages("fdaPDE")
library('fdaPDE')
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order=1)
## Plot it
plot(mesh)
## Creates the basis
FEMbasis = create.FEM.basis(mesh)
## Upload the Meuse data
data(MeuseData)
## Create a triangulation on the convex hull of these data,
## where each data location is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], order = 1)
## Plot the mesh
plot(mesh)
## Upload a domain boundary for these data
data(MeuseBorder)
## Create a constrained Delaunay triangulation with the provided boundary
## where each datalocation is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
## Plot the mesh
plot(mesh)
## Upload the Meuse data
data(MeuseData)
## Create a triangulation on the convex hull of these data,
## where each data location is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], order = 1)
## Plot the mesh
plot(mesh)
## Upload a domain boundary for these data
data(MeuseBorder)
## Create a constrained Delaunay triangulation with the provided boundary
## where each datalocation is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
## Plot the mesh
plot(mesh)
## Upload a triangular mesh and plot it
data("mesh.2D.rectangular")
plot(mesh.2D.rectangular)
## Create a linear Finite Element basis
FEMbasis = create.FEM.basis(mesh.2D.rectangular)
## Define a sinusoidal function as expansion of this basis and plot it
coeff <- sin(mesh.2D.rectangular$nodes[,1])*cos(mesh.2D.rectangular$nodes[,2])
FEM_object<- FEM(coeff, FEMbasis)
plot(FEM_object)
## Upload a triangular mesh and plot it
data("mesh.2D.rectangular")
plot(mesh.2D.rectangular)
## Create a linear Finite Element basis
FEMbasis = create.FEM.basis(mesh.2D.rectangular)
## Define a sinusoidal function as expansion of this basis and plot it
coeff <- sin(mesh.2D.rectangular$nodes[,1])*cos(mesh.2D.rectangular$nodes[,2])
FEM_object<- FEM(coeff, FEMbasis)
plot(FEM_object)
library(ggplot2)
library(dplyr)
#a hopalong attractor
#ggplot theme blank canvas
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
#attractor function
createTrajectory <- function(n, x0, y0, a, b, c) {
#pre-initialize vectors of length n
x <- vector(mode = "numeric", length = n)
y <- vector(mode = "numeric", length = n)
#starting values
x[1] <- x0
y[1] <- y0
#fill vectors with values
for(i in 2:n) {
x[i] <- y[i-1]-1-sqrt(abs(b*x[i-1]-c))*sign(x[i-1]-1)
y[i] <- a-x[i-1]-1
}
#make dataframe
data.frame(x = x, y = y)
}
#constants
a=2
b=1
c=8
v=3
#calculate positions and plot
df=createTrajectory(3000000, 0, 0, a, b, c)
ggplot(df, aes(x, y)) + geom_point(color="#1E1E1E", shape=46, alpha=.05) + opt
ggplot(df, aes(x, y)) + geom_point(color="#1E1E1E", shape=46, alpha=.05) + opt
library(bibliometrix)
biblioshiny()
install.packages(c("ggforce", "ggplot2", "ggsignif", "markdown", "quantreg", "xml2"))
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("Morpho")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("tcltk2")
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
GUImorph()
detach("package:GUImorph", unload = TRUE)
great.friends <- c("Christian", "Kaylea", "Cory", "Emma", "Bethan")
call(great.friends)
great.friends
knit_with_parameters('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Articles/Illustration Error - In Prep/submission/finalised_submission/Hoggard_et_al_2019.Rmd')
dataset <- "https://github.com/CSHoggard/-Morph2019/practical_two.csv""
dataset <- "https://github.com/CSHoggard/-Morph2019/practical_two.csv"
dataset <-  read.csv(dataset, header = T)
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("Rphylip")
R.Version()
if(!require("Momocs")) install.packages('geomorph', repos='http://cran.us.r-project.org')
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')
if(!require("ggtree")) install.packages('ggtree', repos='http://cran.us.r-project.org')
if(!require("ape")) install.packages('ape', repos='http://cran.us.r-project.org')
if(!require("Rphylip")) install.packages('Rphylip', repos='http://cran.us.r-project.org')
if(!require("tidytree")) install.packages('tidytree', repos='http://cran.us.r-project.org')
install.packages("ggsci")
library(ggsci)
scale_color_uchicago()
plot(scale_color_uchicago())
scale_color_uchicago()
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.1, size = 1, span = 1) +
theme_bw()
library(ggplot2)
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.1, size = 1, span = 1) +
theme_bw()
p1 + scale_color_uchicago()
scale_color_uchicago()
scale_color_uchicago
d <- scale_color_uchicago
d <- scale_color_uchicago()
d <- scale_color_uchicago
# install.packages("devtools")
devtools::install_github("ropenscilabs/vitae")
install.packages('tinytex')
install.packages("devtools")
devtools::install_github("ropenscilabs/vitae")
install.packages('tinytex')
tinytex::install_tinytex()
tinytex::tinytex_root()
tinytex::tinytex_root()
library(tinytex)
library(vitae)
remove.packages("vitae", lib="~/R/win-library/3.6")
install.packages("vitae")
library(vitae)
---
---
name: Rob J Hyndman
address: "Department of Econometrics & Business Statistics,\\tabularnewline Monash University, VIC 3800, Australia."
www: robjhyndman.com
phone: +61 3 9905 5141
email: "Rob.Hyndman@monash.edu"
twitter: robjhyndman
github: robjhyndman
date: "`r format(Sys.time(), '%B %Y')`"
headcolor: "000088"
output:
vitae::hyndman:
keep_tex: yes
header_includes:
- \ExecuteBibliographyOptions{useprefix=true}
- renewcommand{\bibfont}{\normalfont\fontsize{10}{12.4}\sffamily}
---
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
unlink('C:/Users/cshog/Desktop/test_cache', recursive = TRUE)
knit_with_parameters('C:/Users/cshog/Desktop/test.Rmd')
install.packages("digest")
install.packages("scholar")
remove.packages("yaml", lib="~/R/win-library/3.6")
install.packages("yaml")
unlink('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/R_Projects/cv_csh/cv_csh/cv_csh_cache', recursive = TRUE)
install.packages(c("digest", "rlang"))
library(vitae)
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
unlink('Untitled/Untitled_cache', recursive = TRUE)
options(tinytex.verbose = TRUE)
install.packages("latexpdf")
library(latexpdf)
detach("package:latexpdf", unload = TRUE)
library(tinytex)
tinytex::install_tinytex()
unlink('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/R_Projects/cv_csh/cv_csh/cv_csh/cv_csh_cache', recursive = TRUE)
detach("package:tinytex", unload = TRUE)
library(tinytex)
library(tinytex)
tinytex::tlmgr_install("ly1")
unlink('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/R_Projects/cv_csh/cv_csh/cv_csh/cv_csh_cache', recursive = TRUE)
---
name: Christian Steven
surname: Hoggard
position: "Visiting Fellow"
address: "Department of Archaeology and Anthropology, University of Southampton"
phone: +44 7913 352688
www: sites.google.com/site/christianhoggard
email: "C.Hoggard@soton.ac.uk"
twitter: CSHoggard
github: CSHoggard
date: "`r format(Sys.time(), '%B %Y')`"
output:
vitae::latexcv:
theme: "modern"
---
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')
if(!require("Momocs")) install.packages('geomorph', repos='http://cran.us.r-project.org')
if(!require("ggtree")) install.packages('ggtree', repos='http://cran.us.r-project.org')
if(!require("ape")) install.packages('ape', repos='http://cran.us.r-project.org')
if(!require("Rphylip")) install.packages('Rphylip', repos='http://cran.us.r-project.org')
if(!require("tidytree")) install.packages('tidytree', repos='http://cran.us.r-project.org')
if(!require("phytools")) install.packages('phytools', repos='http://cran.us.r-project.org')
if(!require("kohonen")) install.packages('kohonen', repos='http://cran.us.r-project.org')
if(!require("cowplot")) install.packages('cowplot', repos='http://cran.us.r-project.org')
backedpoints <- import_tps("TPS_BP_27_09_2019.tps", curves = TRUE) ### import .tps file
load("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/GitHub/-Bornholm_Study/-Bornholm_Study.Rproj")
install.packages("countdown")
install.packages("xaringan")
install.packages("countdown")
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org')
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')
if(!require("cowplot")) install.packages('cowplot', repos='http://cran.us.r-project.org')
install.packages(c("BH", "bibtex", "bookdown", "broom", "callr", "car", "cli", "data.table", "DBI", "directlabels", "dplyr", "DT", "FactoMineR", "fansi", "farver", "geomorph", "gh", "hms", "jsonlite", "knitr", "latticeExtra", "leaps", "loo", "lpSolve", "lwgeom", "magick", "mime", "mnormt", "multcomp", "mvMORPH", "mvtnorm", "openxlsx", "pillar", "plyr", "pracma", "prettyunits", "psych", "quantreg", "R.utils", "raster", "RcppArmadillo", "rlang", "rmarkdown", "RRPP", "sf", "shinycssloaders", "sna", "spam", "SparseM", "stringi", "tidyr", "tidyselect", "tidytree", "tinytex", "tmap", "vctrs", "vitae", "xaringan", "xfun", "XML", "yaml", "zoo"))
install.packages("dplyr")
library(tidyverse)
library(ape)
library(Rphylip)
library(phangorn)
library(cowplot)
library(dendextend)
library(BiocManager)
library(ggtree)
dataset       <- read.csv("dataset_one.csv", header = TRUE, row.names = 1)
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org') ### tidyverse 1.2.1
if(!require("rms")) install.packages('rms', repos='http://cran.us.r-project.org') ### rms 5.1-3.1
if(!require("ggpubr")) install.packages('ggpubr', repos='http://cran.us.r-project.org') ### ggpubr 0.2.3
dataset <- as.data.frame(readxl::read_excel("Chan_et_al_2020_1.xlsx", col_names = TRUE)) ### load the data frame
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-use_wear_test")
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org') ### tidyverse 1.2.1
if(!require("rms")) install.packages('rms', repos='http://cran.us.r-project.org') ### rms 5.1-3.1
if(!require("ggpubr")) install.packages('ggpubr', repos='http://cran.us.r-project.org') ### ggpubr 0.2.3
dataset <- as.data.frame(readxl::read_excel("Chan_et_al_2020_1.xlsx", col_names = TRUE)) ### load the data frame
compdata<- read.csv("Chan_et_al_2020_2.csv", header = T, row.names = 1) ### load the comparative dataset
compdata<- select(compdata, "Contact Material" = contact_material, "Study" = study, "Percentage" = percentage)
df1 <- select(dataset, "classification_id1" = UCT1, W)
df2 <- select(dataset, "classification_id2" = UCT2, W)
df3 <- select(dataset, "classification_id3" = UCT3, W)
df1$classification_id1 <- as.factor(df1$classification_id1)
df2$classification_id2 <- as.factor(df2$classification_id2)
df3$classification_id3 <- as.factor(df3$classification_id3)
fig1a <- ggplot(df1, aes(classification_id1, W)) + geom_jitter(width = 0.15, size = 2, aes(colour = classification_id1)) + ylim(0,1) + labs(x = "Classification", y = "Weight (g)") + scale_colour_manual(values=c("#56B4E9", "#E69F00")) + theme_minimal() + theme(legend.position = "none")
fig1b <- ggplot(df2, aes(classification_id2, W)) + geom_jitter(width = 0.15, size = 2, aes(colour = classification_id2)) + ylim(0,1) + labs(x = "Classification", y = "Weight (g)") + scale_colour_manual(values=c("#56B4E9", "#E69F00")) + theme_minimal() + theme(legend.position = "none")
fig1c <- ggplot(df3, aes(classification_id3, W)) + geom_jitter(width = 0.15, size = 2, aes(colour = classification_id3)) + ylim(0,1) + labs(x = "Classification", y = "Weight (g)") + scale_colour_manual(values=c("#56B4E9", "#E69F00")) + theme_minimal() + theme(legend.position = "none")
glm1 <- glm(classification_id1 ~ W, df1, family = binomial) ### generalised linear model (binomial)
glm2 <- glm(classification_id2 ~ W, df2, family = binomial) ### generalised linear model (binomial)
glm3 <- glm(classification_id3 ~ W, df3, family = binomial) ### generalised linear model (binomial)
summary(glm1) ### summary (inc. parameter signifiance)
summary(glm2) ### summary (inc. parameter signifiance)
summary(glm3) ### summary (inc. parameter signifiance)
fig2a <- ggplot(df1, aes(x=W, y=as.numeric(df1$classification_id1) - 1)) + geom_point(size = 2, aes(colour = classification_id1)) + stat_smooth(method="glm", se=TRUE, colour = "dark grey", method.args = list(family=binomial)) +  labs(x = "Weight (g)", y = "Classification") + scale_x_continuous(breaks=c(0,0.25,0.5,0.75)) + scale_y_continuous(breaks=c(0,1)) + theme_minimal() + theme(legend.position = "none") + scale_colour_manual(values=c("#56B4E9", "#E69F00"))
fig2b <- ggplot(df2, aes(x=W, y=as.numeric(df2$classification_id2) - 1)) + geom_point(size = 2, aes(colour = classification_id2)) + stat_smooth(method="glm", se=TRUE, colour = "dark grey", method.args = list(family=binomial)) +  labs(x = "Weight (g)", y = "Classification") + scale_x_continuous(breaks=c(0,0.25,0.5,0.75)) + scale_y_continuous(breaks=c(0,1)) + theme_minimal() + theme(legend.position = "none") + scale_colour_manual(values=c("#56B4E9", "#E69F00"))
fig2c <- ggplot(df3, aes(x=W, y=as.numeric(df3$classification_id3) - 1)) + geom_point(size = 2, aes(colour = classification_id3)) + stat_smooth(method="glm", se=TRUE, colour = "dark grey", method.args = list(family=binomial)) +  labs(x = "Weight (g)", y = "Classification") + scale_x_continuous(breaks=c(0,0.25,0.5,0.75)) + scale_y_continuous(breaks=c(0,1)) + theme_minimal() + theme(legend.position = "none") + scale_colour_manual(values=c("#56B4E9", "#E69F00"))
chisq.test(table(compdata$Study, compdata$Percentage))
View(compdata)
chisq.test(table(compdata$Study, compdata$Percentage))
chisq.test(
table(compdata$Study, compdata$Percentage))
table(compdata$Study, compdata$Percentage)
chisq.test(compdata$Study, compdata$Percentage)
chisq.test(compdata)
t <- chisq.test(compdata$Study, compdata$Percentage)
t$observed
View(compdata)
chisq.test(x = table(compdata$Study, compdata$Percentage))
d <- chisq.test(x = table(compdata$Study, compdata$Percentage))
d$observed
d <- chisq.test(x = table(compdata$Percentage, compdata$Study))
d$observed
d <- chisq.test(compdata$Percentage, compdata$Study))
d <- chisq.test(compdata$Percentage, compdata$Study)
d$observed
d <- chisq.test(compdata$Study, compdata$Percentage)
d$observed
View(compdata)
compdata
compdata$Study
spread(compdata)
compdata %>% gather(Bone, Hide, Plant, Wood)
compdata %>% gather(Study, Percentage)
compdata %>% gather(`Contact Material`, Percentage)
compdata %>% gather(`Contact Material`)
compdata %>% gather(Value)
rm(d)
figure_3 <- ggplot(compdata, aes(`Contact Material`, Percentage, fill = Study)) + geom_bar(stat="identity", color="black", position=position_dodge()) + theme_minimal() + ylim(0, 60) + scale_fill_brewer(palette="Paired") + labs(y = "Percent of correct responses (%)") + geom_text(aes(label=Percentage), vjust=1.6, color="white", position = position_dodge(0.9), size=3.5)
figure_3
compdata<- read.csv("Chan_et_al_2020_3.csv", header = T, row.names = 1) ### load the comparative dataset
compdata
View(compdata)
chisq.test(compdata$TS, compdata$APS)
compdata %>% add_rownames()
compdata %>% add_rownames() %>% rename(rownames = Contact Material)
compdata %>% add_rownames() %>% rename(Contact Material = rownames)
compdata %>% add_rownames() %>% rename(Contact Material = rowname)
compdata %>% add_rownames() %>% rename(rownames = Contact Material)
View(compdata)
compdata %>% add_rownames()
compdata %>% add_rownames() %>% rename(rowname = Contact Material)
compdata %>% add_rownames() %>% rename(rowname = "Contact Material")
compdata <- compdata %>% add_rownames()
View(compdata)
compdata<- read.csv("Chan_et_al_2020_3.csv", header = T) ### load the comparative dataset
View(compdata)
chisq.test(compdata$TS, compdata$APS)
compdata<- read.csv("Chan_et_al_2020_2.csv", header = T) ### load the comparative dataset
compdata<- read.csv("Chan_et_al_2020_2.csv", header = T) ### load the comparative dataset
View(compdata)
figure_3 <- ggplot(compdata, aes(Contact.Material, Percentage, fill = Study)) + geom_bar(stat="identity", color="black", position=position_dodge()) + theme_minimal() + ylim(0, 60) + scale_fill_brewer(palette="Paired") + labs(y = "Percent of correct responses (%)") + geom_text(aes(label=Percentage), vjust=1.6, color="white", position = position_dodge(0.9), size=3.5)
figure_3
chisq.test(compdata$TS, compdata$APS)
compdata2 <- read.csv("Chan_et_al_2020_3.csv", header = T) ### load the comparative dataset (transformed)
View(compdata2)
chisq.test(compdata1$TS, compdata1$APS)
compdata1 <- read.csv("Chan_et_al_2020_2.csv", header = T) ### load the comparative dataset
compdata2 <- read.csv("Chan_et_al_2020_3.csv", header = T) ### load the comparative dataset (transformed)
chisq.test(compdata1$TS, compdata1$APS)
figure_3 <- ggplot(compdata2, aes(Contact.Material, Percentage, fill = Study)) + geom_bar(stat="identity", color="black", position=position_dodge()) + theme_minimal() + ylim(0, 60) + scale_fill_brewer(palette="Paired") + labs(y = "Percent of correct responses (%)") + geom_text(aes(label=Percentage), vjust=1.6, color="white", position = position_dodge(0.9), size=3.5)
figure_3
ggsave("Figure_3.tiff", width = 120, height = 120, units = "mm")
fig1a <- ggplot(df1, aes(classification_id1, W)) + geom_jitter(width = 0.15, size = 2, aes(colour = classification_id1)) + ylim(0,1) + labs(x = "Classification", y = "Weight (g)") + scale_colour_manual(values=c("#56B4E9", "#E69F00")) + theme_minimal() + theme(legend.position = "none")
fig1b <- ggplot(df2, aes(classification_id2, W)) + geom_jitter(width = 0.15, size = 2, aes(colour = classification_id2)) + ylim(0,1) + labs(x = "Classification", y = "Weight (g)") + scale_colour_manual(values=c("#56B4E9", "#E69F00")) + theme_minimal() + theme(legend.position = "none")
fig1c <- ggplot(df3, aes(classification_id3, W)) + geom_jitter(width = 0.15, size = 2, aes(colour = classification_id3)) + ylim(0,1) + labs(x = "Classification", y = "Weight (g)") + scale_colour_manual(values=c("#56B4E9", "#E69F00")) + theme_minimal() + theme(legend.position = "none")
ggarrange(fig1a, fig1b, fig1c, labels = c("B1", "B2", "B3"), ncol = 1, font.label = list(size = 8))
ggsave("Figure_1.tiff", plot = last_plot(), width = 120, height = 160, units = "mm")
ggarrange(fig1a, fig1b, fig1c, labels = c("B1", "B2", "B3"), ncol = 1, font.label = list(size = 6))
ggarrange(fig1a, fig1b, fig1c, labels = c("B1", "B2", "B3"), ncol = 1, font.label = list(size = 7))
ggsave("Figure_1.tiff", plot = last_plot(), width = 120, height = 160, units = "mm")
glm1 <- glm(classification_id1 ~ W, df1, family = binomial) ### generalised linear model (binomial)
glm2 <- glm(classification_id2 ~ W, df2, family = binomial) ### generalised linear model (binomial)
glm3 <- glm(classification_id3 ~ W, df3, family = binomial) ### generalised linear model (binomial)
fig2a <- ggplot(df1, aes(x=W, y=as.numeric(df1$classification_id1) - 1)) + geom_point(size = 2, aes(colour = classification_id1)) + stat_smooth(method="glm", se=TRUE, colour = "dark grey", method.args = list(family=binomial)) +  labs(x = "Weight (g)", y = "Classification") + scale_x_continuous(breaks=c(0,0.25,0.5,0.75)) + scale_y_continuous(breaks=c(0,1)) + theme_minimal() + theme(legend.position = "none") + scale_colour_manual(values=c("#56B4E9", "#E69F00"))
fig2b <- ggplot(df2, aes(x=W, y=as.numeric(df2$classification_id2) - 1)) + geom_point(size = 2, aes(colour = classification_id2)) + stat_smooth(method="glm", se=TRUE, colour = "dark grey", method.args = list(family=binomial)) +  labs(x = "Weight (g)", y = "Classification") + scale_x_continuous(breaks=c(0,0.25,0.5,0.75)) + scale_y_continuous(breaks=c(0,1)) + theme_minimal() + theme(legend.position = "none") + scale_colour_manual(values=c("#56B4E9", "#E69F00"))
fig2c <- ggplot(df3, aes(x=W, y=as.numeric(df3$classification_id3) - 1)) + geom_point(size = 2, aes(colour = classification_id3)) + stat_smooth(method="glm", se=TRUE, colour = "dark grey", method.args = list(family=binomial)) +  labs(x = "Weight (g)", y = "Classification") + scale_x_continuous(breaks=c(0,0.25,0.5,0.75)) + scale_y_continuous(breaks=c(0,1)) + theme_minimal() + theme(legend.position = "none") + scale_colour_manual(values=c("#56B4E9", "#E69F00"))
figure_2 <-ggarrange(fig2a, fig2b, fig2c, labels = c("B1", "B2", "B3"), nrow = 2, ncol = 2, font.label = list(size = 8))
annotate_figure(figure_2, bottom = text_grob("0: Correct  1: Incorrect", color = "black", face = "bold", size = 10))
ggsave("Figure_2.tiff", width = 180, height = 180, units = "mm")
